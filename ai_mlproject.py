# -*- coding: utf-8 -*-
"""AI/MLproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ygl8FwNhMSGEWLvmGWdbg-wUV5dgIAYg

**Setup and Data Collection***
"""

!pip install streamlit pyngrok

!pip install yfinance pandas numpy matplotlib scikit-learn keras tensorflow

import yfinance as yf

stock = yf.download('AAPL', start='2015-01-01', end='2024-12-31')
stock.to_csv("aapl.csv")

"""**Preprocessing and Feature Engineering**"""

from sklearn.preprocessing import MinMaxScaler
import numpy as np

data = stock['Close'].values.reshape(-1, 1)
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

def create_sequences(data, seq_length=60):
    X, y = [], []
    for i in range(seq_length, len(data)):
        X.append(data[i-seq_length:i])
        y.append(data[i])
    return np.array(X), np.array(y)

X, y = create_sequences(scaled_data)

"""**Build and Train the Model**"""

from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout

model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)),
    Dropout(0.2),
    LSTM(50, return_sequences=False),
    Dropout(0.2),
    Dense(1)
])
model.compile(optimizer='adam', loss='mean_squared_error')

from sklearn.model_selection import train_test_split

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)  # Adjust test_size and random_state as needed

# Now you can fit the model using X_train and y_train
model.fit(X_train, y_train, epochs=20, batch_size=32)

"""**Evaluation and Visualization**"""

predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

# Get the actual prices for the test set
actual_prices = scaler.inverse_transform(y_test) # Get the actual prices from y_test

import numpy as np

np.save("predictions.npy", predictions)
np.save("actual_prices.npy", actual_prices)

from google.colab import files

files.download("predictions.npy")
files.download("actual_prices.npy")

import streamlit as st
import matplotlib.pyplot as plt
import numpy as np

# Load pre-saved results
predictions = np.load("predictions.npy")
actual_prices = np.load("actual_prices.npy")

# Plot
st.title("ðŸ“ˆ Stock Price Prediction: AAPL")
fig, ax = plt.subplots()
ax.plot(actual_prices, color='yellow', label='Actual Price')
ax.plot(predictions, color='grey', label='Predicted Price')
ax.set_title('Stock Price Prediction')
ax.set_xlabel('Time')
ax.set_ylabel('Stock Price')
ax.legend()

st.pyplot(fig)
